### Version Control Systems

## Version Control Systems (VCS)

# System that keep track of change made to files

# Also known as SCM (Source Code Management)



### Distributed VCS

## Git, Mercurial

# The full repo resides locally

# Contains full history

# Server is almost not invloved

#	Commit often and offline

#	Work on the beach / train

# Can push and pull between repos

# Back ups -trivial and readily available	



### Git basics

## Only one .git directory at the top lebel (not sprinkled throughout directory structure like SVN)




### General workflow

# (empty) Create or (existing) clone repo

# Add changes to staging area

# Commit changes (from staging area to local repo)

# Push changes from local to remote reop



### Key concept

# Commit locally

# Push remotely



### Summary

# Git lets you snapshot changes to your code

# Promotes committing change often



### Git setup

## Setup properties globally

# $git config --global user.name "Super Hero"
# $git config --global user.email my@example.com



## Verify that an option has been set

# $git config <option>

# For example $git config user.name



## getting help on any Git command

# $git help <command>



### Initializing a Repo

## Where do I get a repo from ?

# 1. Create a new repo

#	$cd working_dir

#	$git init

#	(Possibly create a .gitignore file)

# 	$git add.
    (. Adds the entire current directory with subdirectories)

#	$git commit -m "remark on the commit, ex: Initial commit"



## 2. Clone an existing repo (for example from GitHub)

#	$git clone https://[giturl]

#	Many transfer protocol available

#		https:
#		git:



### git status

## git status

# Provude the current status of your repo



### git add

## git add <file/dir>

# Add untracked files to be tracked or 

# Add a modified tracked file to the staging area



### git diff


## git diff
# shows the difference between staging and working directory


## git diff --staged
# shows the changes between HEAD (last commit on current branch) and staging directory


## git diff HEAD
# shows the deltas between HEAD and working dir



### git commit


## git commit

## commits your changes to the repo
# Promps for a commit message in an editor

## Better, just use the -m(message) option
# $git commit -m "Your message is here"



### Skipping the staging area

## to skip the staging area - just use -a flag
# After initially adding the file!!!

## Either "-a", "-m", or "-am" will do the trick



### Going back in time

## Before committing

# $git checkout .
# Re-checkout all tracked files overwriting local changes



# $git checkout -- <file>
# Re-checkout just one specific file



## After committing
# $git revert HEAD
# Reverts the most recent commit



### Summary

# You have to add a file for tracking at least once before it can make it into the repo

# Can easily go back in time to a snapshot



### Remote Repos and Github

## $git remote add alias [remote_url]
# Link remote repo with your local repo


## origin - default alias for a cloned repo

## $git push alias branch_name
# Push changes to your branch or master out



### Github

## Web-based hosting service for software projects that use git.


## Why use github ?
# Community-oriented
# Social networking functionality
#	Feeds
#	Followes
#	Watching projects

# Imteresting social networking graphs
# Wiki, Issue tracking




// Push local repository into server side git
$ git push -u origin master



### Ruby: High Level Overview

## Dynamic

## Object-oriented
# object-possessed, almost everything is an object

## Elegant, expressive and declarative
# Terse at times, but extremely readable

## Influenced by Perl, Smalltalk, Eiffel, and LISP
# Designed to make programmers happy



### Ruby basics

## 2 space indentation for each nested level is encouraged
# Not required mandatory (unlike Python)



## "#" is used for comments
# Use comments in moderation - the code itself should tell the story



## Everything is evaluated



### Printing to Console

## puts - standard Ruby method to print string to console (as in put string)

# Add a new line after the printed string
# Similar to System.out.println() in Java
# Used for most of the examples
# "puts obj" is equivalent to "puts obj.to_s"

## p - prints out internal representation of an object

# debbuger-style output
# "p obj" is equivalent to "put obj.inspect"

p "Got ot"
# => Got it



### Naming conventions

## Variables
# Lowercase or snake_case if multiple words

## Constants
# Either ALL_CAPS or FirstCap

## Classes (and Modules)
# CamelCase



### Drop the semicolons

## Leave semicolons off at the end of the file

## Can cram several statements in with a semicolon in between
# usually highy discouraged

Example:
a = 3 # semicolons not needed
a = 5; b = 7 # sometimes used, but not couraged



### IRB - Interactive Ruby

## Console-based interactive Ruby interpreter
# REPL ( Read Evaluate Print Loop )

## Comes with a Ruby installation


## Lets you experiment with quick feedback



### Summary of Ruby basics

# Ruby is extremely expressive

# Everything is evaluated



### Flow of Control

## basic flow control unit

# if/elsif/else
# case 
# until/unless ?
# while/for 

## What True and what is False ?

## What in the world is === ?



### Flow of control

# if/unless/elsif/else

# No parentheses or curly braces

# Use end to close flow control block



### Modifier form 

# if, unless, while, until - on the same line as the statement



### Ture/False

# true/false judgement in Ruby

# "false" and "nil object" are false

# Everything else is True

# Example:

puts "0 is true" if 0                           # 0 is true
puts "string false is true" if "false"          # "false" is true
puts "boolean false is false" if false          # boolean false is false
puts "empty string is true" if ""               # empty string is true
puts "string nil is true" if "nil"              # string nil is true
puts "absence of object nil is false" if nil    # absence of object nil is false



### Triple Equal

# Triple Equal ===

# "Equal" in its own way
# Sometimes it's not about being exactly equal, but judge the property of belonging

# Example:



if /sera/ === "coursera"
    puts " regular expression /sera/ triple equlas 'coursera' "
end



if "Hello" === 'Hello'
    puts "\"Hello\" triple equals 'Hello'"
end


if Integer === 66
    puts "66 is an Integer"
end


if String === 'Hello'
    puts "'Hello' is a string"
end


if (1..100) === 99
    puts "99 is in the range (1..100)"
end


if [1, 2, 3] === 1
    nil
else
    puts "We can not use triple equal to judge membership for a number over a list"
end



### Case expressions

## Two flavors

# 1. Similar to a series of "if" statements

# 2. Specify a target next to "case" and each when "clause" is compared to target.



## '===' is called the case equality operator because it is used in precisely this case.

## No fall-through logic

# Example:



age = 20

case # 1st type of case syntax
    when age >= 18
        puts "You can drive a car"
    else
        puts "Younger than minimim dirving age."
end



name = 'Fisher'

case name # 2nd type of case syntax
    when /fish/i then puts "This name include 'fish' inside."
    when 'Smith' then puts "Your name is Smith"
end



### for Loop

## Hardly used

## each / times preferred


## Comparison:

# Python's range operator gives tail-exclusive interval 
# Ruby's range operator x..y gives tail-inclusive interval

# Example:


# 0..10 is an instance of range data type in Ruby
for i in 0..10
    puts i 
end



### Summary of flow control

# Lots of options for flow control

# Modifier form is an interesting way to be ery expressive

# Non-nil and non-false values are always logic True in Ruby



### Functions / Methods

# Definitions

# How do we call them?

# What and how do they return?

# Default argument

## How to make methods more expressive

## What is "splat"



### Functions and Methods

## Technically, 
a function is defined outside of a class and 
a method is defined inside a class

## In Ruby, every function/method has at least one class it belongs to
# Not always written inside a class



### Methods

# Parentheses are optional both when defining and calling a method

# Recommend to use for clarity



### function return

# No need to declare type of parameters

# Can return whatever you want 

# "return" keyword is optional in Ruby (last execution line of a function)

# Example:

def add_1( x, y)
    (x + y)
end



def add_2( x, y)
    return (x + y)
end



def divide( x, y)
    return "Division by zero is not allowed" if 0 == y 
    return (x/y)
end

puts add_1( 3, 5 )
puts add_2( 3, 5 )

puts divide( 12, 4)
puts divide( 12, 0)



### Expressive Method Names

## Method name can end with

# '?' - Predicate methods

# '!' - Dangerous side-effect

# Example:

def can_divide_by?( number )
    return false if number.zero?
    return true
end

puts can_divide_by? 6

puts can_divide_by? 0



### Default arguments

## Methods can have default arguments

# If a value is passed in - use that passed in value

# Otherwise - use the default value provided

# Example:


def factorial( n )
    return n == 0? 1 : ( n * factorial( n-1 ) )
end

def factorial_default_arg( n = 5 )
    return n == 0? 1 : ( n * factorial_default_arg(n-1) )
end



puts factorial 5
puts factorial(5)
puts factorial_default_arg(5)
puts factorial_default_arg
puts factorial_default_arg(3)



### Splat

# "*" prefix defines a variable length parameter 

# can even apply to middle parameter, not just the last

# Example:


def find_max_from_variable_length_argument(first, *aSeriesOfNumber, last)
    # variable length argument passed in, and become a array of numbers
    return aSeriesOfNumber.max 
end

puts find_max_from_variable_length_argument("Head", 1, 88, 100, 5, "Tail")



### Summary of function

# There is no need to declare parameter type passed in or returned (dynamic)

# "return" is optional, by Ruby definition, the last executable line is automatically "returned"

# We can construct methods with variable length of parameter and pass them into function

# In addition, we can set default argument value in advance.



### Blocks

# How they are used?

# How to incorporate them into our own method?



### Blocks

## Chunks of code

# Enclosed between either curly braces {} or the keywords do and end

# Passes to methods as last "parameter"

## Convention

# Use {} when block content is a single line

# Use "do" and "end" when block content spans multiple lines

## Ofter used as iterators



### Coding with Blocks

## Two ways to configure a block in our own method

## Implicit

# Use "block_given?" to see if block was passed in

# Use "yield" to call the block_given


## Explicit

# Use "&" in front of the last "parameter"

# Use "call" method to call the block



### Summary

## Blocks are just code that you can pass into methods.

## When incorporating into your own methods:
# Either use blocks implicitly
# Or call them explicitly



### file

# Reading and writing to files

# exceptions

# reading values from environment variable



### Summary of file and exceptions

# File automatically closed at the end of the block

# Either use exception handling or check for existence of the file before accessing



### Outline of String

# Different kinds of strings supported by Ruby

# Many methods supported by the String API

# Symbols



### String

## Single-quote literal strings are very literal

# Allow escaping of ' with \

# Show (almost) everything else as is



## Double-quoted strings

# Interpret special characers like \n as newline and \t as tab width

# Allow string interpolation

# Support placehoder for dynamic string output on run-time



### More strings

## String methods ending with ! modify the existing string
# Most other just return a new string

## Can also use %Q{long multiline string}
# Same behavior as double-quoted string



### Overview of Symbols

## :foo- highly optimized strings

## Constant names that you don't have to predeclare
# "Stands for something" string type



### Symnols

## Guaranteed to be unique and immutable
                    ^^^^^^     ^^^^^^^^^

## Can be coverted to a String with to_s
## Similarly, it can be converted to Symbol with to_sym

## Symbol can be a representation of a method name

## Symbols and Strings are similar - 
## We must determine which makes more sense to use



### Summary of Symbols

# Interpolation lets you finish your thought 

# Strings have a lot of really useful API



### Outline of Arrays

# How they are created

# How to modify Arrays

# Accessing elements inside Arrays



### Arrays

# Collection of object references (auto-expandable)

# Indexed using [] operator (method)

# Can be indexed with negative numbers or ranges

***
#  Heterogeneous types allowed in the same array
***

# Can use %w{str1 str2} fpr string array creation



### Modifying Arrays

# Append: push or <<

# Remove: pop or shift

# (method)
# Set: []=          

# Randomly pull element(s) out with sample

# Sort or reverse with sort! and reverse!

# Recall: "!" postfix means carry out the method and modify the content itself



### Useful built-in method of Arrays

# each - loop through array

# select - filter array by selecting 

# reject - filter array by rejecting

# map - modify each element in the array



### Summary of array

# Array API is very flexible and powerful

# Lots of ways to process elements inside the array



### Outline of ranges

# The property and syntax of .. and ...

# How they are useful in Ruby



### Ranges

# Used to express natural consecutive sequences

## 1..20, 'a' .. 'z'

## Two dots -> all-inclusive

# 1..10 ( 1 is included, 10 in included)

## Three dots -> tail-exclusive

# 1...10 ( 1 is included, 10 is excluded )

## Mnemonic jingle

# The more dots you have, the less you have at the end.



## Efficient

# Only shor and end stored

## Can be converted to an array with to_a

## Used for conditions and intervals



### Summary of Ranges

# Ranges are useful for consecutive sequences

# You can convert a range to an array for more funcitonality



### Hashes

## Indexed collection of object references

## Created with either {} or Hash.new

## Also known as associative Arrays

## Index(key) can be anything
# Not just an integer as in the case of arrays

## Like the dictionary in Python
## Like the map container in C++

### Hashes

# Accessed using the [] operator

# Values set using
=> (creation)
[] (post creation)



## What if you try to access a value in the Hash for which an entry does not exist?
# nil is returned

## If a Hash is created with Hash.new(0)
# 0 is returned instead



### More Hashes

## As of Ruby 1.9

# The order of putting things into Hash is maintained

# If using symbols as keys - can use symbol: syntax

## If a Hash is the last argument to a method "{}" are optional.
Note: Last argument not inlucding a block.



### Summary of Hash

# Hashes are indexed collections

# Usage us very similar to regular arrays

# Although uncommon, it can be consied for blocks, so be careful.



### Classes

# How objects are created

# How to access data within those topics



### Object oriented Review

# Identify things your program is dealing with

# Classes are trhings (blueprints)
# Container of methods (behavior)

# Objects are instances of those things

# Object contain instance variables (state)

# Instance variables (state) are like properties of an object.



### Instance variables

## Begin with @
# Example: @name

## Not declared
# Spring into existence when first used.

## Available to all instance methods of the class



### Object creation

## Classes are factories

# Calling new method creates an instance of class
# "new" causes "initialize" 

# Object's state can be (should be) initialized inside the initialize method, the "constructor"



### Accessing data

## Instance variable are private
# Cannot be accessed from outside the class

## Methods have public access by default

## To access instance variables - need to define
# "getter" / "setter" methods

## Use attr_* from instead
# attr_accessor - getter and setter
# attr_reader - getter only
# attr_writer - setter only



## Two problems is taken into consideration

# Person is in an uninitialized state upon creation (without a name or age)

# We probably want to control the maximum age assigned.



## Solution

# Use a constructor and a more intelligent age setter



### "self" modifier

# Inside instance method, self refers to the object itself.

# Usually, using self for calling other methods of the same instance is extraneous.

# At other times, using self is required.
For example, when it could mean a local variable assignment.


# Outside instance method definition, "self" refers to the class itself.



### Summary

# Objects are created with new

# Use the short form for setting/getting data (attr_)

# Don't forget "self" modifier when required.



### Class inheritance

# The "||"(double pipe) operator

# Class methods and class variables

# Class inheritance



### var = var || something

## || operator evaluates the left side

# If true - returns it

# Else - returns the right side

# @x = @x || 5 will return 5 the first time, and @x the next time

## Short form

# @x || = 5 - same as above



### Class Methods and variables

## Invoked on the class (as opposed to instance of class)
# Similar to static methods in Java

## Self outside of the method definition refers to the Class object



### Class Method and Variables

# Three ways to define class methods in Ruby

# Class variables begin with @@

Recall:
# Object variables begin with @



### Class Inheritance

## Every class implicitly inherits from "Object"
# "Object" itself inherits from "BasicObject"

## No multiple inheritance
# Mixins are used instead

## Syntax
class Subclass < Superclass
    ...
end 



### Summary of class inheritance

# Class inheritance lets you override parent's behavior.

# Class methods do NOT need an instance of object in order to be called.

# Class variables begin with @@

# Object variables begin with @



### Modules

## Module as Namespaces

## Module as Mixins

## Using built-in Ruby modules, especially Enumerable

## require_relative



### Overview of Module

## Container for classes, methods and Constants, or other modules

## Like a Class, but cannot be instantiated
# Class inherits from Module and adds new

## Serves two main purposes:
# 1. Namespace
# 2. Mix-in



### Module as Mixin 

## Interfaces in object orient 
# Contract - define what a class "could" do

## Mixins provide a way to share (mix-in) ready code among multiple classes

Note: You can include built-in modules like Enumerable that can do the hard work for you!



### Enumerable Module

# map, select, reject, detect etc..

# Used by Array class and many other 

# We can include it in our own class

# Provide an implementation for each method



### Summary of module 

# Modules allow you to "mixin" useful coe into other classes

# require_relative is useful for including other Ruby source files, relative to the current ruby code.



### Overview of Scope

# Scope of variable

# Constant

# How the scope works with blocks



### Scope

# Methods and classes begin new scope for variables

# Other scope variables do not get carried over to the inner scope

# Use local_variables method to see which variables are in (and which are not in) 
the current scope



### Scope: Constants

## Constant is any reference that begins with uppercase, including classes and modules.

## Constants' scope rule are different than variable scope rules

## Inner scope can see constants defined in outer scope, and can also override outer constants
# Values remains unchanges outside!



### Scope: Blocks

## Blocks ingerit outer scope

## Block is a closure
# Remembers the context in which it was defined and uses that context whenever it is called.



### Block - Local scope

# Even though blocks share the outer scope - 
a variable created inside the block is only available to the block.

# Parameters to the block are always local to the block -
even if they have the same name as variables in the outer scope

# Can explicitly declare block-level variables after a semicolon in the block parameter list.



### Summary of scope

## Method and classes start a new scope

## Constants maintain scope

## Block inherit outer scope
# coule be over-ridden



### Access Control

# When designing your class - important to think about how much of it you will be exposing to the world

# Encapsulation: try to hide internal representation of the object so you can change it later.

# Three levels: public, protected, and private.



### Specifying Access Control

## Two ways to specify access control:

# 1. Specify public, protected or private
Everything until the next access control keyword will be of that access control level.



# 2. Define the methods regularly and then specify public, private, protected access levels,
and list the comma-separated methods under those levels using methos symbols.


### Default setting for method

# Methods in Ruby are public, by default. 



### Access control

## Public methods - no access control is enforced
# Anybody can call these methods.

## Protected methods - can be invoked by the object of the defining class or its subclasses

## Private methods - cannot be invoked with an explicit receiver
# Exception: setting an attribute can be invoked with an explicit receiver.



### Summary

# public and private access controls used the most

# private methods are not callable from outside or inside the class with an explicit receiver.



### Overview of Unit test

## Why write test?
# How do you know that you code works?
-> You really have no idea until you run it.

## How do you refactor with confidence that you didn't break anything?

## Serves as documentation for developers



### Enter Test::Unit

## Ruby takes testing very seriously and ships with Test::Unit

## In Ruby 1.8 - Test::Unit was bloated with extra libraries that included unnecessary code

## Ruby 1.9 stripped Test::Unit to a minimum
Note: The new framework is officially called MiniTest, but it's a drop-in
replacement, so no chages are required to Test::Unit code

## Member of the XUnit family (JUnit, CppUnit)

## Basic idea - extend Test::Unit::TestCase

## Predix method names with test_

## If one of the methods fail - others keep going (this is a good thing)

## Can use setup() adn teardown() methods for setting up behavior that will execute before every test method.



Note: 

# "expected but was", in test report, tells you that what you thought was going to work actually isn'y working correctly.

# You can run unit test every time to make sure nothing is broken, especially after makring a change.

# Test can be automated as part of the build process, and have it report whether things are working or not to you.

# "assert_raise" specifies the exception you expect and, in the coding block, when you expect the exception to occur.



### Summary

# Assertions allow you to exercise your code

# Unit tests give you confidence to restructure/refactor your code.



### Testing with RPsec

# Test::Unit "does the job", 
but it would be nice if tests would be more descriptive, more English-like

# The writing of the test is more intuitive as well as the output from running the tests



### Insturction to intall RPsec

$> gem install rspec 



### Instruction to create a working directory
# Create a spec directory where "specs" go
$> rspec --init



### describe()

## Set of related tests (a.k.a. example group)

## Take either a String or Class as argument

## All specification must be inside a describe block 

## No class to subclass 
# Unlike Test::Unit which always subclasses TestCase class 

Note:
Everything happens inside the describe() method.



### before() and after() methods

# before() and after() methods are similar to setup() and teaddown() in MiniTest

# Can pass in either :each or :all (infrequently used) to specify 
whether the block will run before/after each test, or
once before/after all tests.

# before :all could be useful, if for example, you only want to connect to Database once.



### it() method

# Used to define the actual RSpec specifications/examples

# Takes an optional string that describes the behavior being tested.



### Summary of RSpec

# RSpec makes testing more intuitive.



### RSpec Matchers

## RSpec "hangs" to and not_to methods on all outcome of expectations.

## to()/not_to() methods take one parameter - a Matchers

## Matcher examples:

# be_true/be_false

# eq constant

# raise_erorr(ErrorType)



### Be_predicate - boolean

# If the object on which the test is operating has a predicate (boolean) method -
you automatically get a be_predicate Matcher

# So, for example be_nil is a valid matcher since every Ruby object has a :nil? method



### Summary of RSpec Matchers

# RSpec has a lot of built-in matchers readily available for simplifying writing tests



### Overview of creating your first application
# How to create and run you apply

# Directory structure (CoC)

# Adding static pages to your application



### Creating First App 

# $> rails new my_fisrt_app

# rails new -h for more options



### Version Control yours rails application

# Rails automatically generates .gitignore

# cd my_fisrt_app

# git init

# git add .

# git commit -m "Initial commit"



### Running the application

## Now you have my_first_app directory with auto-generated structure/(some) code

## Rails also provides a built-in web server

## Time to run over application
# (Optional) open up another terminal window / tab

# Go into my_first_app directory

# Run rails server (or rails s )

# Prompt message in console: 
# "Rails x.y.z application starting in development 
# "Listening on tcp://localhost:3000"



### Directory structure conventions

> my_first_app
-> app          # Controllers, Views, Models (and helpers) 
-> bin
-> config       # Configuration files (which DB)
-> db           # Files related to your db and migration "scripts"
-> lib
-> log
-> public       # Static files
-> test
-> tmp
-> vendor
.gitignore
config.ru
Gemfile         # Dependencies managed by Bundler
Gemfile.lock    # Dependencies managed by Bundler
Rakefile
README.rdoc



### public / hello_static.html

# Serers looks into "public" directory before looking anywhere else

# So... if we want to add a completely static web page to our application -
we can add it under public directory

# Open web browser with http://localhost:3000/hello_static.html to see the demo result.



### Summary of Creating your first application

# "rails new", in console, creates a new app

# "rails server" or "rails s", in console, runs the app (need to be inside the generated dictionary)

# Static pages live inside "\public" directory



### Overview of Controller and Views

# How to generate a Controller

# Actions 

# Embedded Ruby (ERB)



### Creating a Controller

## Controller contain actions (Ruby method) and orchestrate web requests

## Rails can quickly generate a controller, and 0 or actions with their associated views.

[rail command syntax in console]
# rails generate controller contrller_name [action1 action2]

Note: we may substitute g for generate



### Generating a controller

# $> rails g controller greeter hello

# "greeter_controller.rb" is the controller

# "greeter/hello.html.erb" is the view

# Return message in console

    create  app/controllers/greeter_controller.rb
    route  get 'greeter/hello'
    invoke  erb
    create    app/views/greeter
    create    app/views/greeter/hello.html.erb
    invoke  test_unit
    create    test/controllers/greeter_controller_test.rb
    invoke  helper
    create    app/helpers/greeter_helper.rb
    invoke    test_unit
    invoke  assets
    invoke    coffee
    create      app/assets/javascripts/greeter.coffee
    invoke    scss
    create      app/assets/stylesheets/greeter.scss


### Generating a Controller

# Directory structure by now

> my_first_app
-> app          # "app" directory is where you will be spending most of your times
--> assets

--> controllers
---> concerns
---> application_controller.rb
---> greeter_controller.rb          "Controller"

--> helpers
--> mailers
--> models 

--> views
---> greeter
----> hello.html.erb                "View"
---> layouts
...



### What does it look like? (View)

# No <DOCTYPE>, <head> or <body> elements

# Content of hello.html.erb

<h1>Greeter#hello</h1>
<p>Find me in app/views/greeter/hello.html.erb</p>



### ERB (Embedded Ruby)

## The view file was generated and it looks like it's an HTML file,
but it has an .erb extension.

## ERB is a templating library (similar to JSP, for example) that
lets you embed Ruby into your HTML.

## Two tag pattern to learn:
# <% ...ruby code... %> - evaluate Ruby code
# <%= ...ruby code ...%> - output evaluated Ruby code 



### New hello.html.erb

<% random_names = ["Alex", "Joe", "Michaek"] %>
<h1>Greetings, <%= random_names.sample %> </h1>
<p>THe time now is <%= Time.now %> </p>



### What does it look like (Controller)

# hello action is just a regular (empty in this case) Ruby method

# What if we want to add a "goodbye" action to the greeter controller, 
and also adds a goodbye.html.erb to app/views/greeter directory?



### Summary of controller and view

# Controllers contain actions (methods)

# Embedded Ruby (ERB) allows you to either 

evaluate expression with <% expression %>, or

output an expression with <%= expression %>



### Overview of Routes

# It turns out - we are missing an important piece, "Routing"

# Before the Controller can orchestrate where the web request goes -
the web request needs to get routed to the Controller

# So, how di the "hello" action work?



### routes.rb

# All the routes need to be specified 
( either generated by rails generator or manually) in the 
config/routes.rb file



### original config/routes.rb

# Let's add the route for the goodbye action

Rails.application.routes.draw do
  get 'greeter/hello'

  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end


### modified config/routes.rb

Rails.application.routes.draw do
  #get 'greeter/hello'


  # Setting for controller and corresponding action
  get 'greeter/hello' => "greeter#hello"
  get 'greeter/goodbye'



  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end



### Rake 

## Ruby's build language

# Ruby's make

# No XML - written entirely in Ruby

## Rails use rake to aumotate app-related tasks

# Database, running test, etc.


## To see a list of rake tasks for your app:
# rake --tasks



### Individual Rake Test

# You can zero-in on an individual rake task and what is does with a --describe flag

# rake --describe task_name



### Prompt return message on "$> rake --describe routes"

PS D:\my_first_app> rake --describe routes
rake routes
    Print out all defined routes in match order, with names. Target specific controller with -c option, or grep routes using -g option



### Rake routes

# "$> rake routes" explains our currently defined routes



### Prompt return message on "$> rake routes"

PS D:\my_first_app> rake routes
         Prefix Verb URI Pattern                Controller#Action
  greeter_hello GET  /greeter/hello(.:format)   greeter#hello
greeter_goodbye GET  /greeter/goodbye(.:format) greeter#goodbye



### Summary of Routes

# Router directs the request to the right controller

# "rake routes" lets us se which routes are currently defined for our application.