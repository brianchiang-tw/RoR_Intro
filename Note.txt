### Version Control Systems

## Version Control Systems (VCS)

# System that keep track of change made to files

# Also known as SCM (Source Code Management)



### Distributed VCS

## Git, Mercurial

# The full repo resides locally

# Contains full history

# Server is almost not invloved

#	Commit often and offline

#	Work on the beach / train

# Can push and pull between repos

# Back ups -trivial and readily available	



### Git basics

## Only one .git directory at the top lebel (not sprinkled throughout directory structure like SVN)




### General workflow

# (empty) Create or (existing) clone repo

# Add changes to staging area

# Commit changes (from staging area to local repo)

# Push changes from local to remote reop



### Key concept

# Commit locally

# Push remotely



### Summary

# Git lets you snapshot changes to your code

# Promotes committing change often



### Git setup

## Setup properties globally

# $git config --global user.name "Super Hero"
# $git config --global user.email my@example.com



## Verify that an option has been set

# $git config <option>

# For example $git config user.name



## getting help on any Git command

# $git help <command>



### Initializing a Repo

## Where do I get a repo from ?

# 1. Create a new repo

#	$cd working_dir

#	$git init

#	(Possibly create a .gitignore file)

# 	$git add.
    (. Adds the entire current directory with subdirectories)

#	$git commit -m "remark on the commit, ex: Initial commit"



## 2. Clone an existing repo (for example from GitHub)

#	$git clone https://[giturl]

#	Many transfer protocol available

#		https:
#		git:



### git status

## git status

# Provude the current status of your repo



### git add

## git add <file/dir>

# Add untracked files to be tracked or 

# Add a modified tracked file to the staging area



### git diff


## git diff
# shows the difference between staging and working directory


## git diff --staged
# shows the changes between HEAD (last commit on current branch) and staging directory


## git diff HEAD
# shows the deltas between HEAD and working dir



### git commit


## git commit

## commits your changes to the repo
# Promps for a commit message in an editor

## Better, just use the -m(message) option
# $git commit -m "Your message is here"



### Skipping the staging area

## to skip the staging area - just use -a flag
# After initially adding the file!!!

## Either "-a", "-m", or "-am" will do the trick



### Going back in time

## Before committing

# $git checkout .
# Re-checkout all tracked files overwriting local changes



# $git checkout -- <file>
# Re-checkout just one specific file



## After committing
# $git revert HEAD
# Reverts the most recent commit



### Summary

# You have to add a file for tracking at least once before it can make it into the repo

# Can easily go back in time to a snapshot



### Remote Repos and Github

## $git remote add alias [remote_url]
# Link remote repo with your local repo


## origin - default alias for a cloned repo

## $git push alias branch_name
# Push changes to your branch or master out



### Github

## Web-based hosting service for software projects that use git.


## Why use github ?
# Community-oriented
# Social networking functionality
#	Feeds
#	Followes
#	Watching projects

# Imteresting social networking graphs
# Wiki, Issue tracking


